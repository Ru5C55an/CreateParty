//
//  SecondSetupProfileViewController.swift
//  PartyMaker
//
//  Created by –†—É—Å–ª–∞–Ω –°–∞–¥—ã–∫–æ–≤ on 25.12.2020.
//

import UIKit
import FirebaseAuth

class SecondSetupProfileViewController: UIViewController {
    
    let fillImageView = AddProfilePhotoView()
    
    let welcomeLabel = UILabel(text: "–ü–æ—Å–ª–µ–¥–Ω–∏–π —à—Ç—Ä–∏—Ö", font: .sfProRounded(ofSize: 26, weight: .regular))

    let addImageLabel = UILabel(text: "–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ")
    let alcoholLabel = UILabel(text: "–ê–ª–∫–æ–≥–æ–ª—å")
    let smokeLabel = UILabel(text: "–ö—É—Ä–µ–Ω–∏–µ")
    
    let interestsLabel = UILabel(text: "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã")
    let sportButton = InterestButton(emoji: "üí™", title: "–°–ø–æ—Ä—Ç", backgroundColor: .white)
    let artButton = InterestButton(emoji: "üé®", title: "–ò—Å–∫—É—Å—Å—Ç–≤–æ", backgroundColor: .white)
    let singingButton = InterestButton(emoji: "üé§", title: "–ü–µ–Ω–∏–µ", backgroundColor: .white)
    let musicButton = InterestButton(emoji: "üéß", title: "–ú—É–∑—ã–∫–∞", backgroundColor: .white)
    let musicianButton = InterestButton(emoji: "üéº", title: "–ö–æ–º–ø–æ–∑–∏—Ç–æ—Ä", backgroundColor: .white)
    let cookingButton = InterestButton(emoji: "üßë‚Äçüç≥", title: "–ö—É–ª–∏–Ω–∞—Ä–∏—è", backgroundColor: .white)
    let itButton = InterestButton(emoji: "üßë‚Äçüíª", title: "IT", backgroundColor: .white)
    let cameraButton = InterestButton(emoji: "üì∑", title: "–ö–∞–º–µ—Ä–∞", backgroundColor: .white)
    let gamepadButton = InterestButton(emoji: "üéÆ", title: "–ò–≥—Ä—ã", backgroundColor: .white)
    let travelButton = InterestButton(emoji: "üó∫", title: "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", backgroundColor: .white)
    let skateButton = InterestButton(emoji: "üõπ", title: "–°–∫–µ–π—Ç–±–æ—Ä–¥–∏–Ω–≥", backgroundColor: .white)
    let scienceButton = InterestButton(emoji: "üî¨", title: "–ù–∞—É–∫–∞", backgroundColor: .white)
    
    let alcoholSwitch = UISwitch()
    let smokeSwitch = UISwitch()
    
    let doneButton = UIButton(title: "–ì–æ—Ç–æ–≤–æ", titleColor: .black, backgroundColor: .white)
    let backButton = UIButton(title: "–ù–∞–∑–∞–¥", titleColor: .green, backgroundColor: .white)
    
    private let username: String
    private let userDescription: String
    private let birthday: String
    private let sex: String
    
    private let currentUser: User
    
    init(currentUser: User, username: String, description: String, birthday: String, sex: String) {
        self.currentUser = currentUser
        self.username = username
        self.userDescription = description
        self.birthday = birthday
        self.sex = sex
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .white
        
        
        
        setupConstraints()
        setupTargets()
        
        let gesture = UITapGestureRecognizer(target: self, action: #selector(selectPhoto))
        fillImageView.addGestureRecognizer(gesture)
    }
    
    @objc func selectPhoto() {
        
        let cameraIcon = #imageLiteral(resourceName: "camera")
        let photoIcon = #imageLiteral(resourceName: "photo")
        
        let actionSheet = UIAlertController(title: nil,
                                            message: nil,
                                            preferredStyle: .actionSheet)
        
        let camera = UIAlertAction(title: "–ö–∞–º–µ—Ä–∞", style: .default) { _ in
            self.chooseImagePicker(source: .camera)
        }
        camera.setValue(cameraIcon, forKey: "image")
        camera.setValue(CATextLayerAlignmentMode.left, forKey: "titleTextAlignment")
        
        let photo = UIAlertAction(title: "–§–æ—Ç–æ", style: .default) { _ in
            self.chooseImagePicker(source: .photoLibrary)
        }
        photo.setValue(photoIcon, forKey: "image")
        photo.setValue(CATextLayerAlignmentMode.left, forKey: "titleTextAlignment")
        
        let cancel = UIAlertAction(title: "–û—Ç–º–µ–Ω–∞", style: .cancel)
        
        actionSheet.addAction(camera)
        actionSheet.addAction(photo)
        actionSheet.addAction(cancel)
        
        present(actionSheet, animated: true) // present –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞—à –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
    }
    
    private func setupTargets() {
        backButton.addTarget(self, action: #selector(backButtonTapped), for: .touchUpInside)
        doneButton.addTarget(self, action: #selector(doneButtonTapped), for: .touchUpInside)
    }
    
    @objc private func backButtonTapped() {
        dismiss(animated: true, completion: nil)
    }
    
    @objc private func doneButtonTapped() {
        FirestoreService.shared.saveProfileWith(id: currentUser.uid,
                                                email: currentUser.email!,
                                                username: username,
                                                avatarImage: fillImageView.circleImageView.image,
                                                description: userDescription,
                                                sex: sex, birthday: birthday) { [weak self] (result) in
            switch result {
            
            case .success(let puser):
                self?.showAlert(title: "–£—Å–ø–µ—à–Ω–æ", message: "–í–µ—Å–µ–ª–∏—Ç–µ—Å—å!") {
                    let mainTabBar = MainTabBarController(currentUser: puser)
                    mainTabBar.modalPresentationStyle = .fullScreen
                    self?.present(mainTabBar, animated: true, completion: nil)
                }
            case .failure(let error):
                self?.showAlert(title: "–û—à–∏–±–∫–∞", message: error.localizedDescription)
            }
        }
    }
    
    deinit {
        print("deinit", SecondSetupProfileViewController.self)
    }
}

// MARK: - Setup constraints
extension SecondSetupProfileViewController {
    
    private func setupConstraints() {
        
        let buttonsStackView = UIStackView(arrangedSubviews: [backButton, doneButton], axis: .horizontal, spacing: 16)
        buttonsStackView.distribution = .fillEqually
        doneButton.heightAnchor.constraint(equalToConstant: 60).isActive = true
       
        let alcoholStackView = UIStackView(arrangedSubviews: [alcoholLabel, alcoholSwitch], axis: .horizontal, spacing: 8)
        let smokeStackView = UIStackView(arrangedSubviews: [smokeLabel, smokeSwitch], axis: .horizontal, spacing: 8)
        let alcoSmokeStackView = UIStackView(arrangedSubviews: [alcoholStackView, smokeStackView], axis: .horizontal, spacing: 16)
        
        let firstEmojiButtonsStackView = UIStackView(arrangedSubviews: [sportButton, artButton, singingButton, musicButton], axis: .horizontal, spacing: 16)
        firstEmojiButtonsStackView.distribution = .fillEqually
        firstEmojiButtonsStackView.heightAnchor.constraint(equalToConstant: 64).isActive = true
        
        let secondEmojiButtonsStackView = UIStackView(arrangedSubviews: [musicianButton, cookingButton, itButton, cameraButton], axis: .horizontal, spacing: 16)
        secondEmojiButtonsStackView.distribution = .fillEqually
        let thirdEmojiButtonsStackView = UIStackView(arrangedSubviews: [gamepadButton, travelButton, skateButton, scienceButton], axis: .horizontal, spacing: 16)
        thirdEmojiButtonsStackView.distribution = .fillEqually
        
        let emojiButtonsStackView = UIStackView(arrangedSubviews: [interestsLabel, firstEmojiButtonsStackView, secondEmojiButtonsStackView, thirdEmojiButtonsStackView], axis: .vertical, spacing: 16)
        
        let stackView = UIStackView(arrangedSubviews: [emojiButtonsStackView, alcoSmokeStackView, buttonsStackView], axis: .vertical, spacing: 32)
        
        addImageLabel.translatesAutoresizingMaskIntoConstraints = false
        welcomeLabel.translatesAutoresizingMaskIntoConstraints = false
        fillImageView.translatesAutoresizingMaskIntoConstraints = false
        stackView.translatesAutoresizingMaskIntoConstraints = false
        
        view.addSubview(welcomeLabel)
        view.addSubview(addImageLabel)
        view.addSubview(fillImageView)
        view.addSubview(stackView)
   
        NSLayoutConstraint.activate([
            welcomeLabel.topAnchor.constraint(equalTo: view.topAnchor, constant: 60),
            welcomeLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor)
        ])
        
        NSLayoutConstraint.activate([
            addImageLabel.topAnchor.constraint(equalTo: welcomeLabel.bottomAnchor, constant: 32),
            addImageLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor)
        ])
        
        NSLayoutConstraint.activate([
            fillImageView.topAnchor.constraint(equalTo: addImageLabel.bottomAnchor, constant: 8),
            fillImageView.centerXAnchor.constraint(equalTo: view.centerXAnchor)
        ])
        
        NSLayoutConstraint.activate([
            stackView.topAnchor.constraint(equalTo: fillImageView.bottomAnchor, constant: 32),
            stackView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 44),
            stackView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -44)
        ])
    }
    
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        self.view.endEditing(true)
    }
}

// Mark: - Work with image
extension SecondSetupProfileViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {
    
    func chooseImagePicker(source: UIImagePickerController.SourceType) {
        
        if UIImagePickerController.isSourceTypeAvailable(source) {
            let imagePicker = UIImagePickerController()
            imagePicker.delegate = self // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –Ω–∞—à –∫–ª–∞—Å—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
            imagePicker.allowsEditing = true
            imagePicker.sourceType = source
            present(imagePicker, animated: true)
        }
    }
    
    func imagePickerController(_ picker: UIImagePickerController,
                               didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        fillImageView.circleImageView.image = info[.editedImage] as? UIImage
        fillImageView.circleImageView.contentMode = .scaleAspectFill
        fillImageView.circleImageView.clipsToBounds = true
        
        dismiss(animated: true)
    }
}

// MARK: - UITextFieldDelegate
extension SecondSetupProfileViewController: UITextFieldDelegate {

    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        return true
    }
}

// MARK: - SwiftUI
import SwiftUI

struct SecondSetupProfileViewControllerProvider: PreviewProvider {
    
    static var previews: some View {
        
        ContainerView().edgesIgnoringSafeArea(.all)
    }
    
    struct ContainerView: UIViewControllerRepresentable {
        
        let secondSetupProfileViewController = SecondSetupProfileViewController(currentUser: Auth.auth().currentUser!, username: "", description: "", birthday: "", sex: "")
        
        func makeUIViewController(context: Context) -> SecondSetupProfileViewController {
            return secondSetupProfileViewController
        }
        
        func updateUIViewController(_ uiViewController: UIViewControllerType, context: Context) {
            
        }
    }
}
